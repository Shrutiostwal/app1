# -*- coding: utf-8 -*-
"""Movie Recommendation  system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wlV3v73biAagC9OW0YIVa0dseN-Qbijp
"""

import numpy as np
import pandas as pd

movies = pd.read_csv('/content/tmdb_5000_movies.csv')
credits = pd.read_csv('/content/tmdb_5000_credits.csv')

movies.head()

movies.head(1)

credits.head(1)

movies = movies.merge(credits,on='title')

movies.head(1)

#genre,id,keywords,title,overview,cast,crew
movies.info()

#genre,id,keywords,title,overview,cast,crew
movies = movies[['movie_id','title','overview','genres','keywords','cast','crew']]

movies.head()

movies.isnull().sum()

movies.dropna(inplace = True)#drop those 3 movies with null values

movies.duplicated().sum()#to check duplicate data

#formatting the coloumns
movies.iloc[0].genres

#[{"id": 28, "name": "Action"}, {"id": 12, "name": "Adventure"}, {"id": 14, "name": "Fantasy"}, {"id": 878, "name": "Science Fiction"}]
#to convert above in below
#['action','adventure', 'fatasy',scifi]
#creating a helper function

def convert(obj):
    L = []
    for i in ast.literal_eval(obj):
        L.append(i['name'])
    return L

import ast
ast.literal_eval('[{"id": 28, "name": "Action"}, {"id": 12, "name": "Adventure"}, {"id": 14, "name": "Fantasy"}, {"id": 878, "name": "Science Fiction"}]')

movies['genres'] = movies['genres'].apply(convert)

movies['keywords']= movies['keywords'].apply(convert)

movies.head()

def convert3(obj):
    L = []
    counter = 0
    for i in ast.literal_eval(obj):
        if counter != 3:
           L.append(i['name'])
           counter+=1
        else:
           break
    return L

movies['cast'].apply(convert3)

def fetch_director(obj):
    L = []
    for i in ast.literal_eval(obj):
        if i['job'] == 'Director':
           L.append(i['name'])
        break
    return L

movies['crew'] = movies['crew'].apply(fetch_director)

movies.head()

movies['overview']= movies['overview'].apply(lambda x:x.split())

movies['genres']= movies['genres'].apply(lambda x:[i.replace(" "," ") for i in x ])
movies['keywords']= movies['keywords'].apply(lambda x:[i.replace(" "," ") for i in x ])
movies['cast']= movies['cast'].apply(lambda x:[i.replace(" "," ") for i in x ])
movies['crrew']= movies['crew'].apply(lambda x:[i.replace(" "," ") for i in x ])

movies.head()

#concatinating all coloumns
movies['tags']=movies['overview'] + movies['genres']+ movies['keywords'] + movies['cast'] + movies['crew']

#removing unwanted coloumns
new_df = movies[['movie_id','title','tags']]

new_df

#convert list to string
new_df['tags'] = new_df['tags'].apply(lambda x:" ".join(x))

new_df.head()

new_df['tags'][0]

new_df['tags'] = new_df['tags'].apply(lambda x:x.lower())

new_df.head()

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=5000, stop_words='english')
#cv is a object
#countvectorization = Convert a collection of text documents to a matrix of token counts.

# by default countvectorization gives sparse matrix but we need numpyarray so we convert it to numpy array
vectors = cv.fit_transform(new_df['tags']).toarray()

vectors

vectors[0]

#cv has many methods one of them is get_feature_names()
cv.get_feature_names_out()

#applying seaming
import nltk

#fromlibrary nltk importing. class PorterStemmer and cresting object ps
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()

def stem(text):
    y = []
    for i in text.split():
        y.append(ps.stem(i))

    return " ".join(y)

new_df ['tags'][0]

stem('in the 22nd century, a paraplegic marine is dispatched to the moon pandora on a unique mission, but becomes torn between following orders and protecting an alien civilization. action adventure fantasy science fiction culture clash future space war s')

new_df['tags'] = new_df['tags'].apply(stem)

from sklearn.metrics.pairwise import cosine_similarity

#cal dist of vector from another
similarity = cosine_similarity(vectors)

similarity.shape

#gives dist of 1st movie with every other movie
similarity[0]

sorted(list(enumerate(similarity[0])),reverse = True,key = lambda x:x[1])[1:6]
#gives movies similar to 1st

def recommend(movie):
    movie_index = new_df[new_df['title'] == movie].index[0]
    distances = similarity[movie_index]
    movies_list = sorted(list(enumerate(distances)),reverse = True,key = lambda x:x[1])[1:6]

    for i in movies_list:
        print(new_df.iloc[i[0]].title)

    #by key we are showing that we want to sort acc to 2nd number not frist i.e similarity bet mvies

recommend('Batman Begins')